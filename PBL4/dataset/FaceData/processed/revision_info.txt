arguments: src/align_dataset_mtcnn.py Dataset/FaceData/raw Dataset/FaceData/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 1.15.0
--------------------
git hash: b'62b1e0c7a4ede2deb8388de8933d08a7f487b159'
--------------------
b'diff --git a/requirements.txt b/requirements.txt\nindex f7084e9..e0ae85b 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,4 +1,4 @@\n-tensorflow==1.15.5\n+tensorflow==1.15.0\n keras==2.3.1\n scipy==1.1.0\n scikit-learn\n@@ -7,4 +7,4 @@ h5py\n matplotlib\n Pillow\n requests\n-psutil\n+psutil\n\\ No newline at end of file\ndiff --git a/src/align/detect_face.py b/src/align/detect_face.py\nindex 7f98ca7..88e9052 100644\n--- a/src/align/detect_face.py\n+++ b/src/align/detect_face.py\n@@ -82,7 +82,7 @@ class Network(object):\n         session: The current TensorFlow session\n         ignore_missing: If true, serialized weights for missing layers are ignored.\n         """\n-        data_dict = np.load(data_path, encoding=\'latin1\').item() #pylint: disable=no-member\n+        data_dict = np.load(data_path, encoding=\'latin1\',allow_pickle=True).item() #pylint: disable=no-member\n \n         for op_name in data_dict:\n             with tf.variable_scope(op_name, reuse=True):\ndiff --git a/src/face_rec_cam.py b/src/face_rec_cam.py\nindex cfbd4f4..c393487 100644\n--- a/src/face_rec_cam.py\n+++ b/src/face_rec_cam.py\n@@ -9,15 +9,11 @@ from imutils.video import VideoStream\n import argparse\n import facenet\n import imutils\n-import os\n-import sys\n-import math\n import pickle\n import align.detect_face\n import numpy as np\n import cv2\n import collections\n-from sklearn.svm import SVC\n \n \n def main():\n@@ -72,10 +68,10 @@ def main():\n \n                 faces_found = bounding_boxes.shape[0]\n                 try:\n-                    if faces_found > 1:\n-                        cv2.putText(frame, "Only one face", (0, 100), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n-                                    1, (255, 255, 255), thickness=1, lineType=2)\n-                    elif faces_found > 0:\n+                    # if faces_found > 1:\n+                    #     cv2.putText(frame, "Only one face", (0, 100), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                    #                 1, (255, 255, 255), thickness=1, lineType=2)\n+                    if faces_found > 0:\n                         det = bounding_boxes[:, 0:4]\n                         bb = np.zeros((faces_found, 4), dtype=np.int32)\n                         for i in range(faces_found):\n@@ -104,7 +100,7 @@ def main():\n \n \n \n-                                if best_class_probabilities > 0.8:\n+                                if best_class_probabilities > 0.5:\n                                     cv2.rectangle(frame, (bb[i][0], bb[i][1]), (bb[i][2], bb[i][3]), (0, 255, 0), 2)\n                                     text_x = bb[i][0]\n                                     text_y = bb[i][3] + 20\n@@ -128,6 +124,4 @@ def main():\n \n             cap.release()\n             cv2.destroyAllWindows()\n-\n-\n main()\n\\ No newline at end of file\ndiff --git a/src/face_rec_flask.py b/src/face_rec_flask.py\nindex 16868f2..51ee6f3 100644\n--- a/src/face_rec_flask.py\n+++ b/src/face_rec_flask.py\n@@ -113,5 +113,4 @@ def upload_img_file():\n \n \n if __name__ == \'__main__\':\n-    app.run(debug=True, host=\'0.0.0.0\',port=\'8000\')\n-\n+    app.run(debug=True, host=\'0.0.0.0\',port=\'8000\')\n\\ No newline at end of file'